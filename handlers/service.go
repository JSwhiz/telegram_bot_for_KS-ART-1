package handlers

import (
	"fmt"
	"telegram/models"
	"telegram/repository"
	"log"

	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
func HandleServiceSelection(bot *tgbotapi.BotAPI, update tgbotapi.Update, userRepository *repository.UserRepository, requestRepository *repository.RequestRepository) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	user := models.User{
		ID:                update.CallbackQuery.From.ID,
		TelegramUsername:  update.CallbackQuery.From.UserName,
		TelegramFirstName: update.CallbackQuery.From.FirstName,
		TelegramLastName:  update.CallbackQuery.From.LastName,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
	_, err := userRepository.CreateUser(user)
	if err != nil {
		log.Printf("Error creating user: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
	service := update.CallbackQuery.Data

	// –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	request, err := requestRepository.CreateRequest(user.ID, service)
	if err != nil {
		log.Printf("Error creating request: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
	messageText := fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: *%s*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É.", service)
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, messageText)
	msg.ParseMode = "Markdown" // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Markdown
	bot.Send(msg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
	sendDescriptionRequest(bot, update.CallbackQuery.Message.Chat.ID, request.ID)
}

// sendDescriptionRequest ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
func sendDescriptionRequest(bot *tgbotapi.BotAPI, chatID int64, requestID int64) {
	messageText := fmt.Sprintf("üìÑ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ%d.", requestID)
	msg := tgbotapi.NewMessage(chatID, messageText)
	bot.Send(msg)
}

// –ü—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getRequestIDForUser(userID int, requestRepository *repository.RequestRepository) (int64, error) {
	var requestID int64
	query := `SELECT id FROM requests WHERE user_id = $1 AND status = 'New' LIMIT 1`
	err := requestRepository.db.QueryRow(query, userID).Scan(&requestID)
	if err != nil {
		return 0, fmt.Errorf("failed to get request ID for user %d: %w", userID, err)
	}
	return requestID, nil
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
func HandleDescriptionInput(bot *tgbotapi.BotAPI, update tgbotapi.Update, requestRepository *repository.RequestRepository) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏)
	description := update.Message.Text

	// –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userID := update.Message.From.ID // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
	requestID, err := getRequestIDForUser(userID, requestRepository) // –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
	if err != nil {
		log.Printf("Error fetching request ID for user %d: %v", userID, err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
		bot.Send(msg)
		return
	}

	// –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ
	if description == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏.")
		bot.Send(msg)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err = requestRepository.UpdateRequestDescription(requestID, description)
	if err != nil {
		log.Printf("Error updating request description: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
		bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
	bot.Send(msg)
}
