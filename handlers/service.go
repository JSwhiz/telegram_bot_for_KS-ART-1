package handlers

import (
	"encoding/json"
	"fmt"
	"log"
	"telegram/models"
	"telegram/repository"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
func HandleServiceSelection(bot *tgbotapi.BotAPI, update tgbotapi.Update, userRepository *repository.UserRepository, requestRepository *repository.RequestRepository) {
	log.Printf("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", update.CallbackQuery.From.ID)
	user := models.User{
		ID:                update.CallbackQuery.From.ID,
		TelegramUsername:  update.CallbackQuery.From.UserName,
		TelegramFirstName: update.CallbackQuery.From.FirstName,
		TelegramLastName:  update.CallbackQuery.From.LastName,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
	_, err := userRepository.CreateUser(user)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.ID, err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
	service := update.CallbackQuery.Data
	log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: %s", user.ID, service)

	// –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	request, err := requestRepository.CreateRequest(user.ID, service)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.ID, err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
	messageText := fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: *%s*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É.", service)
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, messageText)
	msg.ParseMode = "Markdown" // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Markdown
	bot.Send(msg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
	sendDescriptionRequest(bot, update.CallbackQuery.Message.Chat.ID, request.ID)
}

// sendDescriptionRequest ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
func sendDescriptionRequest(bot *tgbotapi.BotAPI, chatID int64, requestID int64) {
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ —Å ID %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", requestID, chatID)
	messageText := fmt.Sprintf("üìÑ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ%d.", requestID)
	msg := tgbotapi.NewMessage(chatID, messageText)
	bot.Send(msg)
}

// –ü—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getRequestIDForUser(userID int64, requestRepository *repository.RequestRepository) (int64, error) {
	log.Printf("–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
	var requestID int64
	log.Printf("–ó–∞–ø—Ä–æ—Å –∫ –ë–î: userID=%d, —Å—Ç–∞—Ç—É—Å='new'", userID)
	query := `SELECT id FROM requests WHERE user_id = $1 AND status = 'new' LIMIT 1`
	err := requestRepository.DB.QueryRow(query, userID).Scan(&requestID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return 0, fmt.Errorf("failed to get request ID for user %d: %w", userID, err)
	}
	log.Printf("ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %d", userID, requestID)
	return requestID, nil
}

func HandleDescription(bot *tgbotapi.BotAPI, update tgbotapi.Update, requestRepository *repository.RequestRepository) {
	
	description := update.Message.Text
	userID := update.Message.From.ID
	log.Printf("HandleDescription –≤—ã–∑–≤–∞–Ω –¥–ª—è userID=%d —Å —Ç–µ–∫—Å—Ç–æ–º: %s", userID, update.Message.Text)
	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", userID, description)

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode-—Å–∏–º–≤–æ–ª—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
	decodedDescription := decodeUnicode(description)

	// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
	log.Printf("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: %s", decodedDescription)

	// –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	requestID, err := getRequestIDForUser(userID, requestRepository)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
		bot.Send(msg)
		return
	}

	// –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ
	if decodedDescription == "" {
		log.Printf("–û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.", userID)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏.")
		bot.Send(msg)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err = requestRepository.UpdateRequestDescription(requestID, decodedDescription)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å ID %d: %v", requestID, err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
		bot.Send(msg)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	log.Printf("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å ID %d —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", requestID, userID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
	bot.Send(msg)
}

// decodeUnicode ‚Äî –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å Unicode-—Å–∏–º–≤–æ–ª–∞–º–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
func decodeUnicode(input string) string {
	var decoded string
	err := json.Unmarshal([]byte(`"`+input+`"`), &decoded)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: %v", err)
		return input // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
	}
	return decoded
}
